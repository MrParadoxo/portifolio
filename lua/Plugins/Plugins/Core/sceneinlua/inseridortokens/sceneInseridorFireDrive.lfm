<?xml version="1.0" encoding="UTF-8"?>
<popupForm name="frmInseriorFireDrive" width="580" height="300" drawContainer="true" resizable="true" placement="center"
		   cancelable="false">
 		   
	<import file="../interfaceUtils.xml"/>
	<style>
		flowPart.optionPart {
			height: 30;
			minWidth: 50;
			maxWidth: 5000;
			margins: {left=2, right=2, top=2, bottom=2};
		}
		
		.itemTitle {
			align: left;
			width: 110;
			autoSize: false;
			horzTextAlign: trailing;	
			vertTextAlign: center;
			margins:{right=5};
		}
		
		.itemContent {
			align: client;
			margins:{right=5};
		}
		
		.groupTitle {
			align: left;						
			autoSize: true;
			wordWrap: false;
			horzTextAlign: leading;	
			vertTextAlign: center;
			margins:{left=10, right=5};		
			fontSize: 15;
			fontColor: #FFCC66;
		}
	</style>

	<template name="GroupHeader">
		<!-- nomeLabel = uniqueName("labGroupHeader"); 
		     
			 if name == nil then
				name = uniqueName("flpGroupHeader");
			end; -->	 
	
		<flowPart class="optionPart">
			<label name="$(nomeLabel)" text="@@$(text)" class="groupTitle"/>
			<horzLine align="bottom" strokeColor="#FFCC6670" margins="{left=10}"/>			
		</flowPart>
	</template>

	<template name="EdicaoBarrinha">
		<flowPart name="flpBar$(indice)" class="optionPart">			
			<label name="labBar$(indice)" class="itemTitle" fontColor="white"/>
			<flowLayout class="itemContent">
				<edit name="edtBarValue$(indice)" width="35" field="$(field)"/>
				<label text="/" horzTextAlign="center" autoSize="true" wordWrap="false" margins="{left=8, right=8}"/>
				<edit name="edtBarMax$(indice)" width="35" field="$(field)Max"/>
				<colorComboBox name="cmbCorBar$(indice)" width="50" useAlpha="false" 
							   margins="{left=8, right=8}" field="$(field)Color"/>
			</flowLayout>	
		</flowPart>
		
		<script>
			self.labBar$(indice).text = LANG('scene.tokenEdit.barraPrefix') .. " $(indice):";
		</script>
	</template>

	<popup name="popMany" width="400" height="250" backOpacity="0.4" autoScopeNode="false">
		<label name="manyDialog" text="@@scene.inseridor.dialog.manyDialog" align="top" height="25"/>
		<label name="manyInstructions" text="@@scene.inseridor.dialog.manyInstructions" align="top" height="25"/>
		<button align="bottom" height="25" text="Ok">
			<event name="onClick">
				local s = sheet.input or "";
		        local t = {}
		        local size = 0;
				for substring in s:gmatch("[^#]+") do
				   table.insert(t, substring)
				   size = size + 1;
				end

				for i=1, size, 2 do
					local newNode = self.rclListaDosTokens:append();

					if newNode ~= nil then
						newNode.id = Utils.generateUniqueString();
						newNode.father = nil;
						newNode.dirLevel = 0;

						newNode.directory = false;
						newNode.name = t[i];
						newNode.icon = "https://github.com/rrpgfirecast/firecast/blob/master/Arts/Icons/player.png?raw=true";
						newNode.image = t[i+1];	
						newNode.width = 1;
						newNode.height = 1;
						newNode.angle = 0;
						newNode.facingMode = sheet.defaults_facingMode or nil;
						newNode.snapToGrid = sheet.defaults_snapToGrid;
						newNode.bar1Color = sheet.defaults_bar1Color or "Indianred";
						newNode.bar2Color = sheet.defaults_bar2Color or "Lightskyblue";
						newNode.bar3Color = sheet.defaults_bar3Color or "Limegreen";	
						newNode.visionIntense = sheet.defaults_visionIntense or 102;
						newNode.visionWeak = sheet.defaults_visionWeak or 1.5;
						newNode.visionDark = sheet.defaults_visionDark or 0;
						newNode.visionAngle = sheet.defaults_visionAngle or 360;
						newNode.hasSight = sheet.defaults_hasSight or false;
						newNode.lightIntense = 0;
						newNode.lightWeak = 0;
						newNode.lightAngle = 360;
						newNode.layer = 'T';  -- tokens
						newNode.facingMode = "rotate";
						self.rclListaDosTokens.selectedNode = newNode;
						self:checkVisibilityOfTabControl();				
						self.tabCtrlDados.tabIndex = 0;
						self.labelVal:setFocus();
					end;
				end;

				sheet.input = "";

				local pop = self:findControlByName("popMany");
				if pop ~= nil then pop:close() end;
			</event>
		</button>
		<textEditor align="client" field="input"/>
	</popup>

	<popup name="popConfig" width="320" height="400" backOpacity="0.4" autoScopeNode="false">
		<flowLayout align="top" autoHeight="true" maxControlsPerLine="1">
							
			<!-- Agarrar ao Grid -->
			<flowPart class="optionPart">	
				<label name="defaults_labSnapToGrid" class="itemTitle"/>
				<checkBox name="defaults_cbxSnapToGrid" class="itemContent" field="defaults_snapToGrid" text="@@scene.tokenEdit.snapToGrid"/>
			</flowPart>
			
			<!-- Facing Mode -->
			<flowPart class="optionPart">	
				<label name="defaults_labFacingMode" text="@@scene.FacingMode.title" class="itemTitle"/>
				<comboBox name="defaults_cmbFacingMode" class="itemContent" values="{'rotate', 'drawArrow'}" field="defaults_facingMode"/>
			</flowPart>

			<!-- Bars -->
			<flowPart class="optionPart">
				<label name="defaults_labBar1" align="client" class="itemTitle" fontColor="white"/>
				<colorComboBox name="defaults_cmbCorBar1" align="right" width="50" useAlpha="false" margins="{left=8, right=8}" field="defaults_bar1Color"/>
			</flowPart>
			<flowPart class="optionPart">
				<label name="defaults_labBar2" align="client" class="itemTitle" fontColor="white"/>
				<colorComboBox name="defaults_cmbCorBar2" align="right" width="50" useAlpha="false" margins="{left=8, right=8}" field="defaults_bar2Color"/>
			</flowPart>
			<flowPart class="optionPart">
				<label name="defaults_labBar3" align="client" class="itemTitle" fontColor="white"/>
				<colorComboBox name="defaults_cmbCorBar3" align="right" width="50" useAlpha="false" margins="{left=8, right=8}" field="defaults_bar3Color"/>
			</flowPart>	

			<!-- Vision -->
			<flowPart class="optionPart" height="150">	
				<label name="defaults_labCampoDeVisao" class="itemTitle" text="@@scene.fogOfWar.alcance.tokenVision"/>				
				<layout class="itemContent">
					<!-- Possui visao -->
					<layout align="top" height="28" margins="{top=2}">
						<label name="defaults_labHasVision" align="left" width="100" horzTextAlign="trailing" margins="{right=4}" text="@@scene.fogOfWar.token.hasSight"/>
						<checkBox name="defaults_visionHave" align="client" class="itemContent" margins="{top=2}" field="defaults_hasSight"/>
					</layout>						
					
					<ComponenteDeLuz title="scene.fogOfWar.sobLuzIntensa" nomeMetric="defaults_labMetricVLI" nomeEdit="defaults_visionIntense" field="defaults_visionIntense"/>
					<ComponenteDeLuz title="scene.fogOfWar.sobLuzFraca" nomeMetric="defaults_labMetricVLF" nomeEdit="defaults_visionWeak" field="defaults_visionWeak"/>
					<ComponenteDeLuz title="scene.fogOfWar.sobEscuridao" nomeMetric="defaults_labMetricVLE" nomeEdit="defaults_visionDark" field="defaults_visionDark"/>
					<ComponenteDeAngulo title="scene.fogOfWar.angulo" nomeEdit="defaults_visionAngle" field="defaults_visionAngle"/>
				</layout>			
			</flowPart>	
		</flowLayout>

		<event name="onNodeReady">
			<![CDATA[
			self.defaults_cmbFacingMode.items = {lang('scene.FacingMode.rotate'), lang('scene.FacingMode.arrow')};
			if self.defaults_cmbFacingMode.text == "" then
				self.defaults_cmbFacingMode.text = sheet.defaults_facingMode
			end;

			self.defaults_labBar1.text = LANG('scene.tokenEdit.barraPrefix') .. " 1:";
			self.defaults_cmbCorBar1.color = sheet.defaults_bar1Color or "Indianred";
	
			self.defaults_labBar2.text = LANG('scene.tokenEdit.barraPrefix') .. " 2:";
			self.defaults_cmbCorBar2.color = sheet.defaults_bar2Color or "Lightskyblue";
	
			self.defaults_labBar3.text = LANG('scene.tokenEdit.barraPrefix') .. " 3:";
			self.defaults_cmbCorBar3.color = sheet.defaults_bar3Color or "Limegreen";

			sheet.defaults_visionIntense = sheet.defaults_visionIntense or 102;
			sheet.defaults_visionWeak = sheet.defaults_visionWeak or 1.5;
			sheet.defaults_visionDark = sheet.defaults_visionDark or 0;
			sheet.defaults_visionAngle = sheet.defaults_visionAngle or 360;
			]]>
		</event>
	</popup>
			
	<script>
		require("system.lua");
		require("rrpgScene_Undo.dlua");
		require("dialogs.lua");
		require("fireDrive.lua");
		require("rrpgScene_Globals.lua");

		local scene = nil;

		if not System.isMobile() then
			self.height = 485;
		end;
		
		function self:checkVisibilityOfTabControl()
			local selected = self.rclListaDosTokens.selectedNode;  			
			local mustBeVisible = selected ~= nil;
			
			self.dsbToken.visible = mustBeVisible and not self.rclListaDosTokens.selectedNode.directory;
			self.layInfoSelectOrCreateToken.visible = not mustBeVisible; 
			self.btnInsert.enabled = mustBeVisible;
			self.btnOkName.enabled = mustBeVisible;
			self.delete.enabled = mustBeVisible;
		end;

		local function showPopupMany()
			local pop = self:findControlByName("popMany");
				
			if pop ~= nil then
				pop:setNodeObject(self.sheet);
				pop:showPopupEx("right", self);
			else
				showMessage("Ops, bug.. nao encontrei o popup para exibir");
			end;				
		end;

		local function showPopupConfig()
			local pop = self:findControlByName("popConfig");
				
			if pop ~= nil then
				pop:setNodeObject(self.sheet);
				pop:showPopupEx("right", self);
			else
				showMessage("Ops, bug.. nao encontrei o popup para exibir");
			end;				
		end;
	</script>

	<event name="OnStartDrop">
	    drop:addAction("id",
	        function(value)
	            --showMessage("ID: " .. (value or "nil"));

	            sheet.adoptionFather = nil
	            sheet.adoptionLevel = -1
	            sheet.adoptionTarget = value
	        end);
	</event>
	
	<scrollBox align="client">
		<event name="OnStartDrop">
		    drop:addAction("id",
		        function(value)
		            --showMessage("ID: " .. (value or "nil"));

		            sheet.adoptionFather = nil
		            sheet.adoptionLevel = -1
		            sheet.adoptionTarget = value
		        end);
		</event>
		<layout align="client" margins="{left=5, bottom=2, top=2}">
			<flowLayout align="top" autoHeight="true" >
				<button width="60" horzTextAlign="center" class="rodapeButton tokenRodapeButton" margins="{left=0, top=2, bottom=2, right=2}" onClick="self:processarNew(false)" name="btnNew" text="@@scene.inseridor.buttons.new"/>
				<button width="60" horzTextAlign="center" class="rodapeButton tokenRodapeButton" margins="{left=0, top=2, bottom=2, right=2}" onClick="self:processarNew(true)" name="btnDir" text="@@scene.inseridor.buttons.dir"/>		
				<button width="60" class="rodapeButton tokenRodapeButton" margins="{left=0, top=2, bottom=2, right=2}" name="delete" text="@@scene.inseridor.labels.delete" onClick="self:deleteToken()"/>

				<button width="60" class="rodapeButton tokenRodapeButton" margins="{left=0, top=2, bottom=2}" name="btnMany" onClick="showPopupMany();" text="@@scene.inseridor.buttons.many"/>
			</flowLayout>		
		
			<rectangle align="client" color="#707070" strokeSize="1" strokeColor="#70707080">
				<recordList align="client" name="rclListaDosTokens" field="tokensSalvos" templateForm="rclItem" selectable="true" autoHeight="false">
					<event name="onSelect">
						if self.rclListaDosTokens.selectedNode == nil then 
							self:checkVisibilityOfTabControl();
							return 
						end;

						if self.rclListaDosTokens.selectedNode.directory == true then 
							-- open/close folder
							self.rclListaDosTokens:beginUpdate();
							self.rclListaDosTokens.selectedNode.dirOpen = not self.rclListaDosTokens.selectedNode.dirOpen

							if self.rclListaDosTokens.selectedNode.dirOpen then
								-- Show kids of opened folder
								local kids = self:getKidsOf(self.rclListaDosTokens.selectedNode.id)
								for i,v in ipairs(kids) do
									v.dirVisible = true
								end
							else
								-- Hide all descendents of opened folder
								local desc = self:getDescendentsOf(self.rclListaDosTokens.selectedNode.id)
								for i,v in ipairs(desc) do
									if v.directory then
										v.dirOpen = false
									end
									v.dirVisible = false
								end
							end

							self.rclListaDosTokens.selectedNode = nil
						else
							-- Use item as a token
							self.dsbToken.node = self.rclListaDosTokens.selectedNode;
						end

						self.rclListaDosTokens:endUpdate();
						self:checkVisibilityOfTabControl();
					</event>
					<event name="onCompare">
							if nodeA.id == nil then
								nodeA.id = Utils.generateUniqueString();
							end;
							if nodeB.id == nil then
								nodeB.id = Utils.generateUniqueString();
							end;
							if nodeA.dirLevel == nil then
								nodeA.dirLevel = 0
							end;
							if nodeB.dirLevel == nil then
								nodeB.dirLevel = 0
							end;

							while (true) do
								if nodeA == nil then 
									--showMessage("ops");
									return 1 
								end;
								if nodeB == nil then 
									--showMessage("ops");
									return -1 
								end;

								-- verify if father
								if nodeB.father == nodeA.id then
									-- A is father of B
									--showMessage("Compare " .. nodeA.name .. " to " .. nodeB.name .. " father -1");
									return -1
								end
								if nodeA.father == nodeB.id then
									-- B is father of A
									--showMessage("Compare " .. nodeA.name .. " to " .. nodeB.name .. " son 1");
									return 1
								end
								if nodeA.father == nodeB.father then
									-- A is sibling of B

									-- put directory in front of token
									if nodeA.directory and not nodeB.directory then 
										--showMessage("Compare " .. nodeA.name .. " to " .. nodeB.name .. " folder -1");
										return -1 
									end;
									if not nodeA.directory and nodeB.directory then 
										--showMessage("Compare " .. nodeA.name .. " to " .. nodeB.name .. " token 1");
										return 1 
									end;

									-- organize by name
									--showMessage("Compare " .. nodeA.name .. " to " .. nodeB.name .. " name");
									return Utils.compareStringPtBr(nodeA.name, nodeB.name);
								end

								-- verify directory level
								if (tonumber(nodeA.dirLevel) or 0) > (tonumber(nodeB.dirLevel) or 0) then
									-- compare NodeB to father of A
									--showMessage("Compare " .. nodeA.name .. " to " .. nodeB.name .. " A up");
									nodeA = self:findItemById(nodeA.father)
								elseif (tonumber(nodeB.dirLevel) or 0) > (tonumber(nodeA.dirLevel) or 0) then
									--compare nodeA to father of B
									--showMessage("Compare " .. nodeA.name .. " to " .. nodeB.name .. " B up");
								 	nodeB = self:findItemById(nodeB.father)
								else
								 	--they are on the same level, compare both of their fathers
								 	--showMessage("Compare " .. nodeA.name .. " to " .. nodeB.name .. " AB up");
								 	nodeB = self:findItemById(nodeB.father)
									nodeA = self:findItemById(nodeA.father)
								end;
							end;

							return 0
					</event>
				</recordList>
			</rectangle>

			<dataLink field="newItemType">
				<event name="onChange">
					if sheet==nil then return end;
					if sheet.newItemType == nil then return end;

					self:processarNew(sheet.newItemType, sheet.newItemParent, sheet.newItemDirLevel)
					sheet.newItemParent = nil
					sheet.newItemType = nil
					sheet.newItemDirLevel = nil
				</event>
			</dataLink>

			<dataLink field="deletedFather">
				<event name="onChange">
					if sheet==nil then return end;
					if sheet.deletedFather == nil then return end;

					local orphans = self:getDescendentsOf(sheet.deletedFather)
					for i,v in ipairs(orphans) do
						NDB.deleteNode(v);
					end

					sheet.deletedFather = nil
				</event>
			</dataLink>

			<dataLink field="adoptionTarget">
				<event name="onChange">
					if sheet==nil then return end;
					if sheet.adoptionLevel == nil then return end;
					if sheet.adoptionTarget == nil then return end;


					local target = self:findItemById(sheet.adoptionTarget);
					local father = self:findItemById(sheet.adoptionFather);
					if target== nil then 
						return
					end
					if target.dirLevel == nil then
                        target.dirLevel = 0
                    end

                    -- dir level difference
					local lvlDiff = 1 + (tonumber(sheet.adoptionLevel) or 0) - (tonumber(target.dirLevel) or 0);
					target.dirLevel = (tonumber(target.dirLevel) or 0) + lvlDiff

					-- adoptive father
					target.father = sheet.adoptionFather

					-- Update target visibility
					--showMessage("Father: " .. (father or "nil"))
					if father~= nil then
						if target.directory then
							target.dirOpen = father.dirOpen
							target.dirVisible = father.dirOpen
							--showMessage("Folder: ".. target.dirOpen .. "-" .. target.dirVisible .. " - " .. father.dirOpen)
						else
							target.dirVisible = father.dirOpen
							--showMessage("Token: ".. target.dirVisible .. " - " .. father.dirOpen)
						end
					end

					-- update descendents dirLevel
					local desc = self:getDescendentsOf(sheet.adoptionTarget)
					for i,v in ipairs(desc) do
						v.dirLevel = (tonumber(v.dirLevel) or 0) + lvlDiff

						-- Update descendents visibility
						if father~= nil then
							if v.directory then
								v.dirOpen = father.dirOpen
								v.dirVisible = father.dirOpen
								--showMessage("Folder: ".. v.dirOpen .. "-" .. v.dirVisible .. " - " .. father.dirOpen)
							else
								v.dirVisible = father.dirOpen
								--showMessage("Token: ".. v.dirVisible .. " - " .. father.dirOpen)
							end
						end
					end

					sheet.adoptionFather = nil
					sheet.adoptionLevel = nil
					sheet.adoptionTarget = nil

					self.rclListaDosTokens:sort()
				</event>
			</dataLink>
		</layout>
		
		<layout visible="false" name="layInfoSelectOrCreateToken" align="right" width="320" margins="{left=2, right=2, top=2, bottom=2}">
			<label name="labSelectTokenInfo" align="client" vertTextAlign="center" horzTextAlign="center" wordWrap="true" text="@@scene.inseridor.selectOrCreateToken"/>
		</layout>
		
		<dataScopeBox align="right" width="320" name="dsbToken">
			<tabControl align="client" margins="{left=5, bottom=2, top=2, right=5}" name="tabCtrlDados">
				<tab name="tabPrincipal" text="@@scene.tokenEdit.propriedades">
					<scrollBox align="client">
						<flowLayout align="top" autoHeight="true" maxControlsPerLine="1" name="flaContent">		
							<GroupHeader text="scene.menu.tokenOptions"/>			
								
							<!-- Personagem -->
							<flowPart class="optionPart">	
								<label name="labPersonagem" class="itemTitle" text="@@scene.tokenEdit.personagem"/>
								<comboBox name="cmbPersonagem" class="itemContent" field="character"/>
							</flowPart>	
							
							<!-- Nome -->
							<flowPart class="optionPart">	
								<label name="labelText" text="@@scene.inseridor.labels.label" class="itemTitle"/>
								<edit name="labelVal" class="itemContent" field="name" onUserChange="self.rclListaDosTokens:sort()"/>
							</flowPart>
							
							<!-- Agarrar ao Grid -->
							<flowPart class="optionPart">	
								<label name="labSnapToGrid" class="itemTitle"/>
								<checkBox name="cbxSnapToGrid" class="itemContent" field="snapToGrid" text="@@scene.tokenEdit.snapToGrid"/>
							</flowPart>
							
							<!-- Facing Mode -->
							<flowPart class="optionPart">	
								<label name="labFacingMode" text="@@scene.FacingMode.title" class="itemTitle"/>
								<comboBox name="cmbFacingMode" class="itemContent" values="{'rotate', 'drawArrow'}" field="facingMode"/>
							</flowPart>

							<flowPart class="optionPart">
								<label name="layerText" text="@@scene.inseridor.labels.layer" class="itemTitle"/>
								<comboBox name="layerVal" class="itemContent" field="layer"/>	
							</flowPart>								
							
							<EdicaoBarrinha indice="1" field="bar1"/>
							<EdicaoBarrinha indice="2" field="bar2"/>
							<EdicaoBarrinha indice="3" field="bar3"/>

							<flowPart class="optionPart">
								<label left="55" top="5" width="60" height="20" name="widthText" text="@@scene.inseridor.labels.width" horzTextAlign="center"/>
								<edit left="115" top="5" width="50" height="25" name="widthVal" type="number" field="width"/>
								<label left="170" top="5" width="60" height="20" name="widthCell" text="@@scene.inseridor.labels.cell"/>
							</flowPart>	

							<flowPart class="optionPart">
								<label left="55" top="5" width="60" height="20" name="heightText" text="@@scene.inseridor.labels.height" horzTextAlign="center"/>
								<edit left="115" top="5" width="50" height="25" name="heightVal" type="number" field="height"/>
								<label left="170" top="5" width="60" height="20" name="heightCell" text="@@scene.inseridor.labels.cell"/>
							</flowPart>	

							<flowPart class="optionPart">
								<label left="55" top="5" width="60" height="20" name="angleText" text="@@scene.inseridor.labels.angle" horzTextAlign="center"/>
								<edit left="115" top="5" width="50" height="25" name="angleVal" type="float" min="0" max="360" decimalPlaces="1" field="angle"/>
								<label left="170" top="5" width="60" height="20" name="angleDegree" text="@@scene.inseridor.labels.degree"/>
							</flowPart>	

						</flowLayout>
					</scrollBox>		
				</tab>

				<tab name="tabImagem" text="@@scene.inseridor.tab.imagem">
					<label name="labTitle" left="10" top="0" width="100" height="28" horzTextAlign="leading" vertTextAlign="center" fontSize="15" fontColor="#FFCC66" text="@@scene.inseridor.tab.imagem"/>
					<horzLine left="10" top="30" width="290" strokeColor="#FFCC6670" margins="{left=10}"/>

					<layout left="0" top="30" width="300" height="270">
						<rectangle left="45" top="5" width="200" height="200" strokeColor="white" color="black"/>
						<label left="45" top="95" width="200" height="20" fontSize="11" name="click" text="@@scene.inseridor.image.click" horzTextAlign="center"/>
						<image left="45" top="5" width="200" height="200" style="autoFit" editable="true" name="image" field="image"/>
						
						<button left="55" top="215" width="185" height="25" name="input" text="@@scene.inseridor.labels.input" onClick="self:openFile()"/>
						<button left="55" top="245" width="185" height="25" name="adjust" text="@@scene.inseridor.labels.adjust" onClick="self:adjustPic()"/>
					</layout>
				</tab>

				<template name="ComponenteDeLuz">
					<!-- nomeLabel = uniqueName("labCompLuz");

						if nomeMetric == nil then
							nomeMetric = uniqueName("labMetric");
						end;
						
						if nomeEdit == nil then
							nomeEdit = uniqueName("edtMetric");
						end;				
					-->	 		
					
					<layout align="top" height="28" margins="{top=2}">
						<label name="$(nomeLabel)" align="left" width="100" horzTextAlign="trailing" margins="{right=4}"/>
					
						<edit left="105" top="0" width="50" height="28" name="$(nomeEdit)" type="float" min="0" max="9999" decimalPlaces="1" field="$(field)"/>
						<label left="158" top="3" width="50" height="28" name="$(nomeMetric)" text="m" autoSize="true" margins="{left=4, right=2}"/>												
					</layout>
					
					<script>
						self.$(nomeLabel).text = lang('$(title)') .. ":";								
					</script>
				</template>		
				
				<template name="ComponenteDeAngulo">
					<!-- nomeLabel = uniqueName("labCompAngulo"); 
					
						if nomeEdit == nil then
							nomeEdit = uniqueName("edtAngulo");
						end;	
					-->	 			
				
					<layout align="top" height="28" margins="{top=2}">
						<label name="$(nomeLabel)" align="left" width="100" horzTextAlign="trailing" margins="{right=4}"/>	
						
						<edit left="105" top="0" width="30" height="28" name="$(nomeEdit)" type="float" min="1" max="360" decimalPlaces="1" field="$(field)"/>
						<label left="138" top="3" width="50" height="28" name="$(nomeMetric)" text="@@lowerCase(scene.angle.short.degrees)" autoSize="true" margins="{left=4, right=2}"/>	
					</layout>
					
					<script>
						self.$(nomeLabel).text = lang('$(title)') .. ":";
					</script>			
				</template>		

				<tab name="tabFOW" text="@@scene.fogOfWar">
					<scrollBox align="client">
						<flowLayout align="top" autoHeight="true" maxControlsPerLine="1" name="flaContentFOW">			
							<GroupHeader text="scene.fogOfWar.tokenVision"/>		
							
							<flowPart class="optionPart" height="150">	
								<label name="labCampoDeVisao" class="itemTitle" text="@@scene.fogOfWar.alcance.tokenVision"/>				
								<layout class="itemContent">
									<!-- Possui visao -->
									<layout align="top" height="28" margins="{top=2}">
										<label name="labHasVision" align="left" width="100" horzTextAlign="trailing" margins="{right=4}" text="@@scene.fogOfWar.token.hasSight"/>
										<checkBox name="visionHave" align="client" class="itemContent" margins="{top=2}" field="hasSight"/>
									</layout>						
									
									<ComponenteDeLuz title="scene.fogOfWar.sobLuzIntensa" nomeMetric="labMetricVLI" nomeEdit="visionIntense" field="visionIntense"/>
									<ComponenteDeLuz title="scene.fogOfWar.sobLuzFraca" nomeMetric="labMetricVLF" nomeEdit="visionWeak" field="visionWeak"/>
									<ComponenteDeLuz title="scene.fogOfWar.sobEscuridao" nomeMetric="labMetricVLE" nomeEdit="visionDark" field="visionDark"/>
									<ComponenteDeAngulo title="scene.fogOfWar.angulo" nomeEdit="visionAngle" field="visionAngle"/>
								</layout>			
							</flowPart>					
													
							<GroupHeader text="scene.fogOfWar.tokenLight"/>														

							<flowPart class="optionPart" height="90">	
								<label name="labLuz" class="itemTitle" text="@@scene.fogOfWar.alcance.tokenLight"/>				
								<layout class="itemContent">
									<ComponenteDeLuz title="scene.fogOfWar.luzIntensa" nomeMetric="labMetricLI" nomeEdit="lightIntense" field="lightIntense"/>
									<ComponenteDeLuz title="scene.fogOfWar.luzFraca" nomeMetric="labMetricLF" nomeEdit="lightWeak" field="lightWeak"/>
									<ComponenteDeAngulo title="scene.fogOfWar.angulo" nomeEdit="lightAngle" field="lightAngle"/>
								</layout>			
							</flowPart>					
						</flowLayout>
					</scrollBox>			
				</tab>
			</tabControl>
		</dataScopeBox>	
	</scrollBox>
	
	<layout class="rodapeForm">
		<flowLayout align="client" horzAlign="trailing">
			<style>
				.tokenRodapeButton {
					height: 35; 
				}
			</style>

			<button width="80" class="rodapeButton tokenRodapeButton" name="btnConfig" onClick="showPopupConfig();" text="@@scene.inseridor.buttons.config" fontSize="11"/>
			<button width="80" horzTextAlign="center" class="rodapeButton tokenRodapeButton" onClick="self:import()" name="btnImport" text="@@scene.inseridor.buttons.import"/>
			<button width="80" horzTextAlign="center" class="rodapeButton tokenRodapeButton" onClick="self:export()" name="btnExport" text="@@scene.inseridor.buttons.export"/>
			<button width="80" horzTextAlign="center" class="rodapeButton tokenRodapeButton" onClick="self:processarOK()" name="btnInsert" text="@@scene.inseridor.buttons.insert"/>
			<button width="110" horzTextAlign="center" class="rodapeButton tokenRodapeButton" onClick="self:processarOkClose()" name="btnOkName" text="@@scene.inseridor.buttons.insertClose"/>
			<button width="80" horzTextAlign="center" class="rodapeButton tokenRodapeButton" onClick="self:processarCancel()" name="btnCancelName" text="@@scene.inseridor.buttons.Close"/>
		</flowLayout>
	</layout>
	
	<script><![CDATA[
		local node = NDB.load("inseridorOptions.xml");

		if node.tokens == nil then
			node.tokens = {};
			node.widthVal = 1;
			node.heightVal = 1;
		end;

		self.image.url = "";
		self.widthVal.text = node.widthVal;
		self.heightVal.text = node.heightVal;
		self.angleVal.text = node.angleVal;

		self.cbxSnapToGrid.checked = node.snapToGrid;

		self.edtBarValue1.text = node.bar1X;
		self.edtBarMax1.text = node.bar1Y;
		self.cmbCorBar1.color = node.bar1C or "Indianred";

		self.edtBarValue2.text = node.bar2X;
		self.edtBarMax2.text = node.bar2Y;
		self.cmbCorBar2.color = node.bar2C or "Lightskyblue";

		self.edtBarValue3.text = node.bar3X;
		self.edtBarMax3.text = node.bar3Y;
		self.cmbCorBar3.color = node.bar3C or "Limegreen";

		self.cmbPersonagem.value = tostring(node.character) or "0";

		self.visionIntense.text = node.visionIntense;
		self.visionWeak.text = node.visionWeak;
		self.visionDark.text = node.visionDark;
		self.visionAngle.text = node.visionAngle;
		self.visionHave.checked = node.visionHave;
		self.lightIntense.text = node.lightIntense;
		self.lightWeak.text = node.lightWeak;
		self.lightAngle.text = node.lightAngle;

		self.layerVal.items = {lang("scene.inseridor.labels.layer1"), lang("scene.inseridor.labels.layer2"), lang("scene.inseridor.labels.layer3")};
		self.layerVal.values = {'B', 'O', 'T'};
		
		self.cmbFacingMode.items = {lang('scene.FacingMode.rotate'), lang('scene.FacingMode.arrow')};

		function self:prepareForShow(oScene)
			scene = oScene;

			self:listAllCharacters();
			self:checkVisibilityOfTabControl();			
		end;

		function self:findItemById(id)
			local tokens = NDB.getChildNodes(sheet.tokensSalvos);
			for i,v in ipairs(tokens) do
				if v.id == id then
					return v
				end
			end
			return nil
		end

		function self:getKidsOf(id)
			local kids = {};
			local index = 0;

			local tokens = NDB.getChildNodes(sheet.tokensSalvos);
			local found = true;

			for i,v in ipairs(tokens) do
				if v.father == id then
					index = index + 1;
					kids[index] = v
				end
			end

			return kids;
		end

		function self:getDescendentsOf(id)
			local descendents = {};
			local index = 0;
			local dept = 0;

			local tokens = NDB.getChildNodes(sheet.tokensSalvos);
			local found = true;

			while dept <= index do
				for i,v in ipairs(tokens) do
					if v.father == id then
						index = index + 1;
						descendents[index] = v
					end
				end
				dept = dept + 1
				if descendents[dept] ~= nil then
					id = descendents[dept].id
				end
			end

			return descendents;
		end

		function self:listAllCharacters()
			local mesa = Firecast.getMesaDe(scene);

			local personagens = {};
			recursiveEnumPersonagensEmBibItem(mesa.biblioteca, personagens);
			
			table.sort(personagens,
				function(left, right)
					return Utils.compareStringPtBr(left.nome, right.nome) < 0;
				end);
				
			local nomes = {};
			local valores = {};
			
			nomes[1] = LANG("scene.tokenEdit.semPersonagem");
			valores[1] = "0";
			
			for i = 1, #personagens, 1 do
				nomes[#nomes + 1] = personagens[i].nome;
				valores[#valores + 1] = tostring(personagens[i].codigoInterno);
			end;
			
			self.cmbPersonagem.items = nomes;
			self.cmbPersonagem.values = valores;
		end;

		function recursiveEnumPersonagensEmBibItem(bibItem, dest)
			if bibItem.tipo == "personagem" then
				if (bibItem.loginDono ~= nil) and (bibItem.loginDono ~= "") then
					dest[#dest + 1] = bibItem;
				end;
			else
				local filhos = bibItem.filhos;
				
				for i = 1, #filhos, 1 do
					recursiveEnumPersonagensEmBibItem(filhos[i], dest);
				end;
			end;
		end;

		function self:openFile()
			local selNode = self.rclListaDosTokens.selectedNode;
			
			if selNode == nil then
				return;
			end;
		
			Dialogs.openFile("Selecione o arquivo de imagem", "image/*", false,
		        function(arquivos)
		                local arq = arquivos[1];
		                -- arq.name possui o nome do arquivo
		                -- arq.stream possui o objeto stream do conteúdo 

		                FireDrive.createDirectory("/uploads");

		                local date_table = os.date("*t")
				        local subfolder = date_table.year .. date_table.month;

				        FireDrive.createDirectory("/uploads/" .. subfolder);
				        
		                FireDrive.upload("/uploads/" .. subfolder .. "/" .. arq.name, arq.stream,
		                	function(fditem)
								if selNode ~= nil then
									selNode.image = fditem.url;
								end;		                		
		                	end);          
		        end);
		end;

		function self:adjustPic()
			local width = self.image.naturalWidth;
			local height = self.image.naturalHeight;

			if width < height then
				self.dsbToken.node.width = 1;
				self.dsbToken.node.height = math.floor((height/width) +0.5)
			elseif height < width then
				self.dsbToken.node.width = math.floor((width/height) +0.5)
				self.dsbToken.node.height = 1;
			else
				self.dsbToken.node.width = 1;
				self.dsbToken.node.height = 1;
			end
		end;

		function self:deleteToken()
			local nodeToDelete = self.rclListaDosTokens.selectedNode;
			
			if nodeToDelete ~= nil then

				local prompt = lang('scene.inseridor.labels.deleteConfirm');
				if nodeToDelete.directory == true then
					prompt = lang('scene.inseridor.labels.deleteConfirm2');
				end
		
				Dialogs.confirmYesNo(prompt,
					function (confirmado)
						if confirmado then	
							if nodeToDelete.directory then
                            	sheet.deletedFather = nodeToDelete.id
                            end
							NDB.deleteNode(nodeToDelete);
							self:checkVisibilityOfTabControl();
						end;
					end);
			end;
		end;

		function self:import()
			Dialogs.openFile(lang("scene.inseridor.import"), "application/xml", false, 
				function(arquivos)
					local arq = arquivos[1];

					local import = {};
					local bytes = arq.stream:read(import, arq.stream.size);

					local xml = Utils.binaryDecode(import, "utf8");

					NDB.importXML(sheet, xml);
				end);
		end;

		function self:export()
			local xml = NDB.exportXML(sheet);

			local export = {};
			local bytes = Utils.binaryEncode(export, "utf8", xml);

			local stream = Utils.newMemoryStream();
			local bytes = stream:write(export);

			Dialogs.saveFile(lang("scene.inseridor.export"), stream, "tokens.xml", "application/xml",
				function()
					stream:close();
					showMessage(lang("scene.inseridor.exported"));
				end);
		end;

		function self:processarOkClose()
			self:processarOK();
			self:processarCancel();
		end;

		
		function self:processarNew(dir, father, dirLevel)
			local newNode = self.rclListaDosTokens:append();
			
			if newNode == nil then return end;

			newNode.id = Utils.generateUniqueString();
			newNode.father = father;
			newNode.dirLevel = tonumber(dirLevel) or 0;

			if dir then
				newNode.directory = true;
				newNode.dirOpen = true;
				newNode.name = lang("scene.inseridor.buttons.dir");
				newNode.icon = "https://github.com/rrpgfirecast/firecast/blob/master/Arts/Icons/folderOpen.png?raw=true";
			else
				newNode.directory = false;
				newNode.name = lang("scene.inseridor.nameYourToken");
				newNode.icon = "https://github.com/rrpgfirecast/firecast/blob/master/Arts/Icons/player.png?raw=true";
				newNode.width = 1;
				newNode.height = 1;
				newNode.angle = 0;	
				newNode.facingMode = sheet.defaults_facingMode or nil;
				newNode.snapToGrid = sheet.defaults_snapToGrid;
				newNode.bar1Color = sheet.defaults_bar1Color or "Indianred";
				newNode.bar2Color = sheet.defaults_bar2Color or "Lightskyblue";
				newNode.bar3Color = sheet.defaults_bar3Color or "Limegreen";	
				newNode.visionIntense = sheet.defaults_visionIntense or 102;
				newNode.visionWeak = sheet.defaults_visionWeak or 1.5;
				newNode.visionDark = sheet.defaults_visionDark or 0;
				newNode.visionAngle = sheet.defaults_visionAngle or 360;
				newNode.hasSight = sheet.defaults_hasSight or false;
				newNode.lightIntense = 0;
				newNode.lightWeak = 0;
				newNode.lightAngle = 360;
				newNode.layer = 'T';  -- tokens
				newNode.facingMode = "rotate";
				self.rclListaDosTokens.selectedNode = newNode;
				self:checkVisibilityOfTabControl();				
				self.tabCtrlDados.tabIndex = 0;
				self.labelVal:setFocus();
			end;

			self.rclListaDosTokens:sort();
		end;

		function self:processarOK()	
			local x, y;
			local _lastMouseDown = rawget(scene, "_lastMouseDown");	
			local layer;
			
			if self.layerVal.value == 'O' then
				layer = "objects";
			elseif self.layerVal.value == 'B' then
				layer = "background"
			else
				layer = "tokens";
			end;					
						
			if _lastMouseDown ~= nil then
				x = _lastMouseDown.x;
				y = _lastMouseDown.y;
			else
				x = (scene.worldWidth / 2);
				y = (scene.worldHeight / 2);				
			end;

			local i, j = scene.grid:worldToCell(x, y);
			local tx, ty = scene.grid:cellToWorld(i, j);
			x, y = UTIL_BomLugarCenter(scene, tx, ty, layer);		
		
			local token = scene.items:addToken(layer);
			local size = scene.grid.cellSize;
			local width = (tonumber(self.widthVal.text) or 1) * size;
			local height = (tonumber(self.heightVal.text) or 1) * size;
			local angle = tonumber(self.angleVal.text) or 0;		

			token.snapToGrid = self.cbxSnapToGrid.checked;

			token.barValue1 = self.edtBarValue1.text;
			token.barMax1 = self.edtBarMax1.text;
			token.barColor1 = self.cmbCorBar1.color;
			token.barValue2 = self.edtBarValue2.text;
			token.barMax2 = self.edtBarMax2.text;
			token.barColor2 = self.cmbCorBar2.color;
			token.barValue3 = self.edtBarValue3.text;
			token.barMax3 = self.edtBarMax3.text;
			token.barColor3 = self.cmbCorBar3.color;

			local ownerCharID = tonumber(self.cmbPersonagem.value) or 0;
			if ownerCharID > 0 then
				token.ownerCharacter = ownerCharID;
			else
				token.ownerCharacter = 0;
			end;

			if self.visionIntense.text==nil or self.visionIntense.text=="" then
				self.visionIntense.text = "102";
			end;
			if self.visionWeak.text==nil or self.visionWeak.text=="" then
				self.visionWeak.text = "1,5";
			end;
			if self.visionAngle.text==nil or self.visionAngle.text=="" then
				self.visionAngle.text = "360";
			end;
			if self.lightAngle.text==nil or self.lightAngle.text=="" then
				self.lightAngle.text = "360";
			end;

			token.visionIntenseLightRange = self.visionIntense.text;
			token.visionWeakLightRange = self.visionWeak.text;
			token.visionDarknessRange = self.visionDark.text;
			token.visionAngle= self.visionAngle.text;
			token.visionHaveVision = self.visionHave.checked;
			token.lightIntenseRange = self.lightIntense.text;
			token.lightWeakRange = self.lightWeak.text;
			token.lightAngle = self.lightAngle.text;

			if self.cmbFacingMode.value ~= "" then
				token.facingMode = self.cmbFacingMode.value;
			end;
			
			token.width = width;
			token.height = height;
			token.rotation = angle;			
			token.x = x - width / 2;
			token.y = y - height / 2;
			token:doSnapToGrid();

			token.image.url = self.image.url;
			scene.items:clearSelection();
			token.selected = true;
		end;
		
		function self:processarCancel()
			self:close();
		end;
		]]>
	</script>
	
	<event name="onKeyUp">	
		if (event.keyCode == 0x89) or (event.keyCode == 0x1B) then
			setTimeout(
				function()
					self:processarCancel();
				end, 1);
			
			event.keyCode = 0;
			event.key = "";
		end;
	</event>	
	
	<event name="onCancelRequest">
		self:processarCancel();
	</event>
	
</popupForm>