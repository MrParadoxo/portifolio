<?xml version="1.0" encoding="UTF-8"?>
<popupForm name="frmTokenProps" width="420" height="300" drawContainer="true" resizable="true" placement="center"
		   cancelable="false">
 		   
	<import file="interfaceUtils.xml"/>
	<style>
		flowPart.optionPart {
			height: 30;
			minWidth: 50;
			maxWidth: 5000;
			margins: {left=2, right=2, top=2, bottom=2};
		}
		
		.itemTitle {
			align: left;
			width: 110;
			autoSize: false;
			horzTextAlign: trailing;	
			vertTextAlign: center;
			margins:{right=5};
		}
		
		.itemContent { 
			align: client;
			margins:{right=5};
		}
		
		.groupTitle {
			align: left;						
			autoSize: true;
			wordWrap: false;
			horzTextAlign: leading;	
			vertTextAlign: center;
			margins:{left=10, right=5};		
			fontSize: 15;
			fontColor: #FFCC66;
		}
		
		label {
			wordWrap: false;
		}
		
	</style>	

	<template name="GroupHeader">
		<!-- nomeLabel = uniqueName("labGroupHeader"); 
		     
			 if name == nil then
				name = uniqueName("flpGroupHeader");
			end; -->	 
	
		<flowPart class="optionPart">
			<label name="$(nomeLabel)" class="groupTitle"/>
			<horzLine align="bottom" strokeColor="#FFCC6670" margins="{left=10}"/>			
		</flowPart>
		
		<script>
			self.$(nomeLabel).text = lang("$(text)");
		</script>
	</template>

	<script>	
		require("system.lua");
		require("rrpgScene_Globals.lua");
		require("rrpgScene_Undo.dlua");
		require("rrpgSceneUtil.lua");
				
		local theToken = nil;
		local theSelection = nil;
		local theMesa = nil;
		local podeVerBarrinhas = false;
		local podeVerCoisasDeFoW = false;
		
		if not System.isMobile() then
			self.height = 450;
			self.width = 310;
		end;
	</script>	
	
	<template name="EdicaoBarrinha">
		<flowPart name="flpBar$(indice)" class="optionPart">			
			<label name="labBar$(indice)" class="itemTitle" fontColor="white"/>
			<flowLayout class="itemContent">
				<edit name="edtBarValue$(indice)" width="35"/>
				<label text="/" horzTextAlign="center" autoSize="true" wordWrap="false" margins="{left=8, right=8}"/>
				<edit name="edtBarMax$(indice)" width="35" height="30"/>
				<colorComboBox name="cmbCorBar$(indice)" width="50" useAlpha="false" 
							   margins="{left=8, right=8}" height="30"/>
			</flowLayout>	
		</flowPart>
		
		<script>
			self.labBar$(indice).text = LANG('scene.tokenEdit.barraPrefix') .. " $(indice):";
			self.flpBar$(indice).height = self.flpBar$(indice).height + 1; 
		</script>
	</template>
	
	<tabControl align="client">
		<tab name="tabPrincipal">
			<scrollBox align="client">
				<flowLayout align="top" autoHeight="true" maxControlsPerLine="1" name="flaContent">			
					<GroupHeader text="scene.menu.tokenOptions"/>			
						
					<!-- Personagem -->
					<flowPart class="optionPart">	
						<label name="labPersonagem" class="itemTitle"/>
						<comboBox name="cmbPersonagem" class="itemContent"/>
					</flowPart>	
					
					<!-- Nome -->
					<flowPart class="optionPart">	
						<label name="labNome" class="itemTitle"/>
						<edit name="edtNome" class="itemContent"/>
					</flowPart>	

					
					<!-- Agarrar ao Grid -->
					<flowPart class="optionPart">	
						<label name="labSnapToGrid" class="itemTitle"/>
						<checkBox name="cbxSnapToGrid" class="itemContent"/>
					</flowPart>					
					
					<!-- Facing Mode -->
					<flowPart class="optionPart">	
						<label name="labFacingMode" class="itemTitle"/>
						<comboBox name="cmbFacingMode" class="itemContent" values="{'rotate', 'drawArrow'}"/>
					</flowPart>						
					
					<EdicaoBarrinha indice="1"/>
					<EdicaoBarrinha indice="2"/>
					<EdicaoBarrinha indice="3"/>	
					
				</flowLayout>
			</scrollBox>		
		</tab>
		
		<tab name="tabAura" title="@@scene.fogOfWar.aura.tabTitle">
			<scrollBox align="client">
					
				<flowLayout align="top" autoHeight="true" maxControlsPerLine="1" name="flaAura" margins="{left=10, right=10, top=10, bottom=2}">	
					<!-- AREA DO KAREL -->

					<checkBox name="cbxPossuiAura" left="30" top="20" fontSize="18" text="@@scene.FormaAura.PossuiAura">
						<event name="onChange">
							-- por mais feio que seja foi necessaria essas "gambiarra" por conta de algum bug do flowLayout --
							
							if self.cbxPossuiAura.checked then
								self.flaAuraContent.visible = true;
								self.flaAuraContent.height = self.flaAuraContent.height + 1;
								self.flaAuraContent.height = self.flaAuraContent.height - 1;
							else
								self.flaAuraContent.visible = false;
								self.flaAuraContent.height = self.flaAuraContent.height + 1;
								self.flaAuraContent.height = self.flaAuraContent.height - 1;
							end;
						</event>
					</checkBox>
					
						
					<flowLayout name="flaAuraContent" visible="false" autoHeight="true" align="top" minWidth="50" maxWidth="50000"  maxControlsPerLine="1" margins="{top=5}">
													
						<flowPart class="optionPart" name="flpFormaAura">	
							<label name="labFormaAura" class="itemTitle"/>
							<comboBox name="cmbFormaAura" class="itemContent">
								<event name="onChange">
									if self.cmbFormaAura.value == "URL" then
										self.flpImagemAura.visible = true;
										self.fplCorAura.visible = false;
										self.flaAuraContent:needRealign();
									else
										self.flpImagemAura.visible = false;
										self.fplCorAura.visible = true;
										self.flaAuraContent:needRealign();											
									end;																			

									if self.cmbFormaAura.value == "C" then	
										self.flpRaioAura.visible = true;
										self.fplAlturaAura.visible = false;
										self.fplLarguraAura.visible = false;
										self.flaAuraContent:needRealign();
									elseif self.cmbFormaAura.value == "SC" then		
										self.flpRaioAura.visible = true;
										self.fplAlturaAura.visible = false;
										self.fplLarguraAura.visible = false;
										self.flaAuraContent:needRealign();
									elseif self.cmbFormaAura.value == "CP" then
										self.flpRaioAura.visible = true;
										self.fplAlturaAura.visible = false;
										self.fplLarguraAura.visible = false;
										self.flaAuraContent:needRealign();
									elseif self.cmbFormaAura.value == "COD" then
										self.flpRaioAura.visible = true;
										self.fplAlturaAura.visible = false;
										self.fplLarguraAura.visible = false;
										self.flaAuraContent:needRealign();
									else
										self.flpRaioAura.visible = false;
										self.fplAlturaAura.visible = true;
										self.fplLarguraAura.visible = true;
										self.flaAuraContent:needRealign();
									end;															
								</event>
							</comboBox>
						</flowPart>	
						
						<flowPart class="optionPart" height="200" visible="true" width="200" name="flpImagemAura">	
							<rectangle class="itemContent" width="200" height="200" strokeColor="white" color="black"/>
							<label class="itemContent" width="200" height="20" fontSize="11" name="labescolhaimg" horzTextAlign="center"/>
							<image class="itemContent" width="200" height="200" style="autoFit" editable="true" name="imageAura" />
						</flowPart>	

						<flowPart class="optionPart" visible="false" name="flpURLAura">	
							<label name="labAuraURL" class="itemTitle"/>
							<edit name="edtAuraURL" class="itemContent"/>
						</flowPart>		

						<flowPart class="optionPart" visible="false" name="flpRaioAura">	
							<label name="labRaioAura" class="itemTitle"/>
							<edit name="edtRaioAura" class="itemContent" width="75" align="left" type="float" text="5" min="0.1"/>
							<label name="labUnidadeMetrica1" align="left" class="itemContent" />
						</flowPart>	
					
						<flowPart class="optionPart" name="fplAlturaAura">	
							<label name="labAlturaAura" class="itemTitle"/>
							<edit name="edtAlturaAura" class="itemContent" width="75" align="left" type="float" text="5" min="0.1"/>
							<label name="labUnidadeMetrica2" align="left" class="itemContent" />
						</flowPart>		
						
						<flowPart class="optionPart" name="fplLarguraAura">	
							<label name="labLarguraAura" class="itemTitle"/>
							<edit name="edtLarguraAura" class="itemContent" width="75" align="left" type="float" text="5" min="0.1"/>
							<label name="labUnidadeMetrica3" align="left" class="itemContent" />
						</flowPart>		
						
						<flowPart class="optionPart" name="fplCorAura">	
							<label name="labCorAura" class="itemTitle"/>
							<colorComboBox name="cmbCorAura" color="red" class="itemContent"/>
						</flowPart>							
					</flowLayout>					
				</flowLayout>								
			</scrollBox>				
		 </tab>	
 
		<tab name="tabImagem" text="@@scene.inseridor.tab.imagem">
			<label name="labTitle" left="10" top="0" width="100" height="28" horzTextAlign="leading" vertTextAlign="center" fontSize="15" fontColor="#FFCC66" text="@@scene.inseridor.tab.imagem"/>
			<horzLine left="10" top="30" width="290" strokeColor="#FFCC6670" margins="{left=10}"/>

			<layout left="0" top="30" width="300" height="270">
				<rectangle left="45" top="5" width="200" height="200" strokeColor="white" color="black"/>
				<label left="45" top="95" width="200" height="20" fontSize="11" name="click" text="@@scene.inseridor.image.click" horzTextAlign="center"/>
				<image left="45" top="5" width="200" height="200" style="autoFit" hitTest="true" editable="true" name="image" field="image"/>
				
				<button left="55" top="215" width="185" height="25" name="input" text="@@scene.inseridor.labels.input" onClick="self:openFile()"/>
			</layout>
		</tab>
		 
		<template name="ComponenteDeLuz">
			<!-- nomeLabel = uniqueName("labCompLuz");

				if nomeMetric == nil then
					nomeMetric = uniqueName("labMetric");
				end;
				
				if nomeEdit == nil then
					nomeEdit = uniqueName("edtMetric");
				end;				
			-->	 		
		
			<layout align="top" height="28" margins="{top=2}">
				<label name="$(nomeLabel)" align="left" width="110" horzTextAlign="trailing" margins="{right=4}" textTrimming="none"/>	
				
				<layout align="client">
					<edit name="$(nomeEdit)" align="client" type="float" min="0" max="9999" decimalPlaces="1"/>
					<label name="$(nomeMetric)" text="m" autoSize="true" align="right" margins="{left=4, right=2}"/>													
				</layout>
			</layout>
			
			<script>
				self.$(nomeLabel).text = lang('$(title)') .. ":";								
			</script>
		</template>		
		
		<template name="ComponenteDeAngulo">
			<!-- nomeLabel = uniqueName("labCompAngulo"); 
			
				if nomeEdit == nil then
					nomeEdit = uniqueName("edtAngulo");
				end;	
			-->	 			
		
			<layout align="top" height="28" margins="{top=2}">
				<label name="$(nomeLabel)" align="left" width="110" horzTextAlign="trailing" margins="{right=4}"/>	
				
				<layout align="client">
					<edit name="$(nomeEdit)" align="client" type="float" min="1" max="360" decimalPlaces="0"/>
					<label text="@@lowerCase(scene.angle.short.degrees)" autoSize="true" align="right" margins="{left=4, right=2}"/>													
				</layout>
			</layout>
			
			<script>
				self.$(nomeLabel).text = lang('$(title)') .. ":";
			</script>			
		</template>			
		
		<tab name="tabFOW">
			<scrollBox align="client">
				<flowLayout align="top" autoHeight="true" maxControlsPerLine="1" name="flaContentFOW">			
					<GroupHeader text="scene.fogOfWar.tokenVision"/>			
					
					<flowPart class="optionPart" height="150">	
						<label name="labCampoDeVisao" class="itemTitle"/>				
						<layout class="itemContent">
							<!-- Possui visao -->
							<layout align="top" height="28" margins="{top=2}">
								<label name="labHasVision" align="left" width="100" horzTextAlign="trailing" margins="{right=4}"/>
								<checkBox name="cbxHasVision" align="client" class="itemContent" margins="{top=2}"/>																											
							</layout>						
							
							<ComponenteDeLuz title="scene.fogOfWar.sobLuzIntensa" nomeMetric="labMetricVLI" nomeEdit="edtMetricVLI"/>
							<ComponenteDeLuz title="scene.fogOfWar.sobLuzFraca" nomeMetric="labMetricVLF" nomeEdit="edtMetricVLF"/>
							<ComponenteDeLuz title="scene.fogOfWar.sobEscuridao" nomeMetric="labMetricVLE" nomeEdit="edtMetricVLE"/>
							<ComponenteDeAngulo title="scene.fogOfWar.angulo" nomeEdit="edtAnguloVisao"/>
						</layout>			
					</flowPart>		
										
											
					<GroupHeader text="scene.fogOfWar.tokenLight"/>														

					<flowPart class="optionPart" height="90">	
						<label name="labLuz" class="itemTitle"/>				
						<layout class="itemContent">
							<ComponenteDeLuz title="scene.fogOfWar.luzIntensa" nomeMetric="labMetricLI" nomeEdit="edtMetricLI"/>
							<ComponenteDeLuz title="scene.fogOfWar.luzFraca" nomeMetric="labMetricLF" nomeEdit="edtMetricLF"/>
							<ComponenteDeAngulo title="scene.fogOfWar.angulo" nomeEdit="edtAnguloLuz"/>
						</layout>			
					</flowPart>					
				</flowLayout>
			</scrollBox>			
		</tab>
	</tabControl>
			
	<BottomActionCancelPopupPanel actionClick="self:processarOK()" cancelClick="self:processarCancel()"/>

	<script><![CDATA[	
		self.title = lang('scene.menu.tokenOptions');	
		self.labPersonagem.text = lang('scene.tokenEdit.personagem');
		self.cbxSnapToGrid.text = lang('scene.tokenEdit.snapToGrid');
		self.labNome.text = lang('scene.tokenEdit.nome') .. ":";
		self.tabPrincipal.text = lang('scene.tokenEdit.propriedades');
		self.tabFOW.text = lang('scene.fogOfWar');
		self.labCampoDeVisao.text = lang('scene.fogOfWar.alcance.tokenVision');
		self.labLuz.text = lang('scene.fogOfWar.alcance.tokenLight');
		self.labHasVision.text = lang('scene.fogOfWar.token.hasSight');
		self.labFacingMode.text = lang('scene.FacingMode.title');
		self.cmbFacingMode.items = {lang('scene.FacingMode.rotate'), lang('scene.FacingMode.arrow')};
		self.labAlturaAura.text = lang('scene.labAlturaAura.text');
		self.labLarguraAura.text = lang('scene.labLarguraAura.text');
		self.labFormaAura.text = lang('scene.labFormaAura.text');
		
		self.cmbFormaAura.items = {lang('scene.FormaAura.URL'), 
		                           lang('scene.FormaAura.Circulo'), 
								   lang('scene.FormaAura.Quadrado'), 
								   lang('scene.FormaAura.ConeDiagonal'), 
								   lang('scene.FormaAura.ConeHorizontal'), 
								   lang('scene.FormaAura.SemiCirculo'), 
								   lang('scene.FormaAura.CirculoPerfeito')};
		
		self.cmbFormaAura.values = {'URL', 'C', 'Q', 'COD', 'COH', 'SC', 'CP'}
		self.labAuraURL.text = lang('scene.labAuraURL.text');
		self.labCorAura.text = lang('scene.labCorAura.text');
		self.labRaioAura.text = lang('scene.labRaioAura.text');
		self.labescolhaimg.text = lang('scene.labescolhaimg.text');
		
		local AURA_NAME = "aura"; 
		
		function recursiveEnumPersonagensEmBibItem(bibItem, dest)
			if bibItem.tipo == "personagem" then
				if (bibItem.loginDono ~= nil) and (bibItem.loginDono ~= "") then
					dest[#dest + 1] = bibItem;
				end;
			else
				local filhos = bibItem.filhos;
				
				for i = 1, #filhos, 1 do
					recursiveEnumPersonagensEmBibItem(filhos[i], dest);
				end;
			end; 
		end;

		function self:openFile()
			Dialogs.openFile("Selecione o arquivo de imagem", "image/*", false,
		        function(arquivos)
		                local arq = arquivos[1];
		                -- arq.name possui o nome do arquivo
		                -- arq.stream possui o objeto stream do conteúdo 

		                FireDrive.createDirectory("/uploads");

		                local date_table = os.date("*t")
				        local subfolder = date_table.year .. date_table.month;

				        FireDrive.createDirectory("/uploads/" .. subfolder);
				        
		                FireDrive.upload("/uploads/" .. subfolder .. "/" .. arq.name, arq.stream,
		                	function(fditem)
								self.image.url = fditem.url;	                		
		                	end);
		        end);
		end;
		
		function self:listarPersonagens(mesa)
			local personagens = {};
			recursiveEnumPersonagensEmBibItem(mesa.biblioteca, personagens);
			
			table.sort(personagens,
				function(left, right)
					return Utils.compareStringPtBr(left.nome, right.nome) < 0;
				end);
				
			local nomes = {};
			local valores = {};
			
			nomes[1] = LANG("scene.tokenEdit.semPersonagem");
			valores[1] = "0";
			
			for i = 1, #personagens, 1 do
				nomes[#nomes + 1] = personagens[i].nome;
				valores[#valores + 1] = tostring(personagens[i].codigoInterno);
			end;
			
			self.cmbPersonagem.items = nomes;
			self.cmbPersonagem.values = valores;
		end;
		
		function self:prepareForShow(oSelection, oScene)
			theSelection = oSelection;
			
			if #theSelection > 0 then
				theToken = theSelection[1];
			else
				theToken = nil;
			end;					
			
			podeVerBarrinhas = false;
			
			if theToken ~= nil then		
				podeVerBarrinhas = oScene.isGM or theToken.isMine;
				podeVerCoisasDeFoW = podeVerBarrinhas and oScene.fogOfWar.enabled;
			
				theMesa = Firecast.getMesaDe(oScene);
				self:beginUpdate();
			
				if theMesa ~= nil then
					self:listarPersonagens(theMesa);
					self.cmbPersonagem.value = tostring(theToken.ownerCharacter) or "0";
				else
					self.cmbPersonagem.items = {};
				end;
			
				self.cbxSnapToGrid.checked = theToken.snapToGrid;
				self.edtNome.text = theToken.name;
				
				for i = 1, 3, 1 do
					self["flpBar" .. i].visible = podeVerBarrinhas;
					
					if podeVerBarrinhas then
						self["edtBarValue" .. i].text = theToken["barValue" .. i];
						self["edtBarMax" .. i].text = theToken["barMax" .. i];						
						self["cmbCorBar" .. i].color = theToken["barColor" .. i];
					end;
				end;							
				
				self.tabFOW.visible = podeVerCoisasDeFoW;
				local metricToShow = lang("metric." .. oScene.worldMetricName);				
				self.labMetricVLI.text = metricToShow;
				self.labMetricVLF.text = metricToShow;
				self.labMetricVLE.text = metricToShow;
				self.labMetricLI.text = metricToShow;
				self.labMetricLF.text = metricToShow;
								
				self.edtMetricVLI.asNumber = theToken.visionIntenseLightRange;
				self.edtMetricVLF.asNumber = theToken.visionWeakLightRange;
				self.edtMetricVLE.asNumber = theToken.visionDarknessRange;				
				self.edtMetricLI.asNumber = theToken.lightIntenseRange;
				self.edtMetricLF.asNumber = theToken.lightWeakRange;
				self.edtAnguloVisao.asNumber = theToken.visionAngle;
				self.edtAnguloLuz.asNumber = theToken.lightAngle;
				self.cbxHasVision.checked = theToken.visionHaveVision;							
				self.cmbFacingMode.value = theToken.facingMode;	

				-- Carregar Imagem 

				self.image.url = theToken.image.url;	
				
				-- Carregar Dados de Aura		
				
				self.labUnidadeMetrica1.text = lang("metric." .. oScene.worldMetricName);
				self.labUnidadeMetrica2.text = lang("metric." .. oScene.worldMetricName);
				self.labUnidadeMetrica3.text = lang("metric." .. oScene.worldMetricName);
				
				local opGraficaAura = theToken.canvas:findByName(AURA_NAME);	
				
				if opGraficaAura ~= nil then				
					self.cbxPossuiAura.checked = true
					self.edtAlturaAura.asNumber = opGraficaAura.height or 0;					
					self.edtLarguraAura.asNumber = opGraficaAura.width or 0;					
					self.cmbFormaAura.value = opGraficaAura.userData.FormaAura;
					self.imageAura.url = opGraficaAura.url;
					self.edtRaioAura.asNumber = (opGraficaAura.height / 2) + (opGraficaAura.width / 2);
					self.labUnidadeMetrica1.text = lang("metric." .. oScene.worldMetricName);
					self.labUnidadeMetrica2.text = lang("metric." .. oScene.worldMetricName);
					self.labUnidadeMetrica3.text = lang("metric." .. oScene.worldMetricName);
					
					if opGraficaAura.userData.FormaAura == "URL" then
						self.imageAura.url = opGraficaAura.url;					
					elseif opGraficaAura.userData.FormaAura == "SC" then
						self.edtRaioAura.asNumber = (opGraficaAura.height / 2) + (opGraficaAura.width);
						self.cmbCorAura.color = opGraficaAura.color;
					else
						self.cmbCorAura.color = opGraficaAura.color;		
					end;					
				else
					self.cbxPossuiAura.checked = false
					self.cmbFormaAura.value = 'CP';
				end;																				
				
				self:endUpdate();											
			end;		
		end;		
		
		
		function self:processarOK()
			if theToken == nil then
				return;
			end;
		
			theToken:beginUpdate();
			
			tryFinally(
				function()
					SC3UNDO_Capture(theToken.scene, 
						function()
							local ownerCharID = tonumber(self.cmbPersonagem.value) or 0;
							
							if ownerCharID > 0 then
								theToken.ownerCharacter = ownerCharID;
							else
								theToken.ownerCharacter = 0;
							end;
							
							theToken.snapToGrid = self.cbxSnapToGrid.checked;
							theToken.name = self.edtNome.text;				
							
							if podeVerBarrinhas then
								for i = 1, 3, 1 do
									theToken["barValue" .. i] = self["edtBarValue" .. i].text;
									theToken["barMax" .. i] = self["edtBarMax" .. i].text;						
									theToken["barColor" .. i] = self["cmbCorBar" .. i].color;
								end;										
							end;

							-- Atualizar Imagem

							theToken.image.url = self.image.url;
                           						   						   
							-- Salvar Aura
							
							local opGraficaAura = theToken.canvas:findByName(AURA_NAME);	
														
							-- 1 - Deletar se precisar deletar, ou se o que tem lá não é util.
							
							if opGraficaAura ~= nil then
							    local eraURL = opGraficaAura.userData.FormaAura == "URL"															
								local deveSerURL = self.cmbFormaAura.value == "URL"
							
								if not self.cbxPossuiAura.checked or (eraURL and not deveSerURL) or (not eraURL and deveSerURL) then
									opGraficaAura:delete()
									opGraficaAura = nil
								end;												
							end
																						
							-- 2 -- Se precisar, criar aura
														
							if opGraficaAura == nil and self.cbxPossuiAura.checked then
								if self.cmbFormaAura.value == "URL" then
									opGraficaAura = theToken.canvas:addBitmap();
								else
									opGraficaAura = theToken.canvas:addPath();
								end;															
							end
													
							
							-- 3 -- Se existir aura, alterar ela
							
							if opGraficaAura ~= nil then
								opGraficaAura.name = AURA_NAME
								opGraficaAura.height = self.edtAlturaAura.asNumber;
								opGraficaAura.width = self.edtLarguraAura.asNumber;
								opGraficaAura.y = (opGraficaAura.height /-2);
								opGraficaAura.x = (opGraficaAura.width /-2);
								opGraficaAura.xOrigin = 0.5;
								opGraficaAura.yOrigin = 0.5;
					            opGraficaAura.z = 10;                      
								opGraficaAura.outOfOrderMode = "beforeOwnerLayer"; 
								opGraficaAura.opacity = 0.5;     
								opGraficaAura.widthMetric = "worldMetric";
								opGraficaAura.heightMetric = "worldMetric";	
								opGraficaAura.xMetric = "worldMetric";
								opGraficaAura.yMetric = "worldMetric";
								opGraficaAura.userData.FormaAura = self.cmbFormaAura.value;
																
								if opGraficaAura.objectType == "opBitmap" then
									opGraficaAura.url = self.imageAura.url;
									opGraficaAura.opacity = 0.85;
								else		
									if opGraficaAura.userData.FormaAura == "C" then							
										opGraficaAura.color = self.cmbCorAura.color;
										opGraficaAura.height = self.edtRaioAura.asNumber;
								        opGraficaAura.width = self.edtRaioAura.asNumber;
										opGraficaAura.y = -(opGraficaAura.height / 2);
										opGraficaAura.x = -(opGraficaAura.width / 2);
										opGraficaAura.xOrigin = 0.5; 
										opGraficaAura.yOrigin = 0.5;
										opGraficaAura.pathData = criarPathAreaCirculo(math.ceil(opGraficaAura.height / 2));	
									end;
								
									if opGraficaAura.userData.FormaAura == "Q" then																										
										opGraficaAura.color = self.cmbCorAura.color;
										opGraficaAura.pathData = criarPathAreaQuadrado();										
									end;
									
									if opGraficaAura.userData.FormaAura == "COD" then
										opGraficaAura.color = self.cmbCorAura.color;
										opGraficaAura.xOrigin = 0.0;     -- X começa em 1.0 largura de token + 0.0 metros
										opGraficaAura.yOrigin = 0.0;
										opGraficaAura.height = self.edtRaioAura.asNumber;
								        opGraficaAura.width = self.edtRaioAura.asNumber;
										opGraficaAura.x = 0;	
										opGraficaAura.y = 0;	
										opGraficaAura.pathData = criarPathAreaConeDiagonal(math.ceil(opGraficaAura.height / 2), (math.ceil(opGraficaAura.width / 2)));										
									end;
																		
									if opGraficaAura.userData.FormaAura == "COH" then
										opGraficaAura.color = self.cmbCorAura.color;
										opGraficaAura.xOrigin = 1.0;  
										opGraficaAura.yOrigin = 0.5;
										opGraficaAura.x = 0;	
										opGraficaAura.y = opGraficaAura.height / -2;	
										opGraficaAura.pathData = criarPathAreaConeHorizontal(math.ceil((opGraficaAura.height / 2) + (opGraficaAura.width / 2)));										
									end;
									
									if opGraficaAura.userData.FormaAura == "SC" then
										opGraficaAura.color = self.cmbCorAura.color;										
										opGraficaAura.xOrigin = 1.0; 
										opGraficaAura.yOrigin = 0.5;
										opGraficaAura.x = 0;
										opGraficaAura.height = self.edtRaioAura.asNumber;
								        opGraficaAura.width = self.edtRaioAura.asNumber / 2;										
										opGraficaAura.y = opGraficaAura.height / -2;										
										opGraficaAura.pathData = criarPathAreaSemiCirculo(math.ceil((opGraficaAura.height / 2) + (opGraficaAura.width / 2)));
									end;
									
									if opGraficaAura.userData.FormaAura == "CP" then
										opGraficaAura.data = "M 25, 50 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0";		
										opGraficaAura.color = self.cmbCorAura.color;
										opGraficaAura.height = self.edtRaioAura.asNumber;
								        opGraficaAura.width = self.edtRaioAura.asNumber;
										opGraficaAura.y = opGraficaAura.height / -2;
										opGraficaAura.x = opGraficaAura.width / -2;
										opGraficaAura.xOrigin = 0.5; 
										opGraficaAura.yOrigin = 0.5;										
									end;
								end;
							end;
														
							-- Finaliza o Salva Aura 	
														
							if podeVerCoisasDeFoW then
								theToken.visionIntenseLightRange = self.edtMetricVLI.asNumber;
								theToken.visionWeakLightRange = self.edtMetricVLF.asNumber;
								theToken.visionDarknessRange = self.edtMetricVLE.asNumber;				
								theToken.lightIntenseRange = self.edtMetricLI.asNumber;
								theToken.lightWeakRange = self.edtMetricLF.asNumber;
								theToken.visionAngle = self.edtAnguloVisao.asNumber;
								theToken.lightAngle = self.edtAnguloLuz.asNumber;
								theToken.visionHaveVision = self.cbxHasVision.checked;
							end;
							
							theToken.facingMode = self.cmbFacingMode.value;
						end);
				end,
				
				function()				
					theToken:endUpdate();	
				end);			
					
			self:close();
		end;
			
		function self:processarCancel()
			self:close();
		end;
		]]>
	</script>
	
	<event name="onKeyUp">	
		if (event.keyCode == 0x89) or (event.keyCode == 0x1B) then
			setTimeout(
				function()
					self:processarCancel();
				end, 1);
			
			event.keyCode = 0;
			event.key = "";
		end;
	</event>	
	
	<event name="onCancelRequest">
		self:processarCancel();
	</event>	
</popupForm>