require("fireDriveGlobals.dlua");local fdUploads = {};local _uploadIdGenerator = 0;local _uploads = {};local _uploadsByFullName = {};local _uploadsByFolder = {};local function findUploadFromFullName(fullDestFileName)	local colaltedName = fireDriveCollationPath(fullDestFileName);	local id = _uploadsByFullName[colaltedName];		if id ~= nil then		return _uploads[id];	else		return nil;	end;end;function fdUploads.getUploadsInFolder(folderPath)	local collatedName = fireDriveCollationPath(folderPath);	local uploadsNaPasta = _uploadsByFolder[collatedName];	local ret = {};		if uploadsNaPasta ~= nil then		for k, v in pairs(uploadsNaPasta) do			local id = k;						if id ~= nil then				local upload = _uploads[id];								if upload ~= nil then					ret[#ret + 1] = upload;				end;			end;		end;	end;		return ret;end;function fdUploads.getOrCreateUploadTable(fullDestFileName)	local upload = findUploadFromFullName(fullDestFileName);	if upload == nil then		_uploadIdGenerator = _uploadIdGenerator + 1;		local esteId = _uploadIdGenerator;				upload = {};		upload.id = esteId;		upload.name = extractFileName(fullDestFileName);		upload.fullDestFileName = fullDestFileName;		upload.collationDestFileName = fireDriveCollationPath(fullDestFileName);		upload.sending = false;		upload.nodeName = "upload" .. tostring(upload.id);		upload.nodes = {};		upload.uploadSent = 0;		upload.uploadMax = 0;		upload.errorMsg = nil;				setmetatable(upload.nodes, {__mode="k"}); -- referencia fraca				_uploads[upload.id] = upload;		_uploadsByFullName[upload.collationDestFileName] = upload.id;				upload.collationFolderName = fireDriveCollationPath(extractFilePath(fullDestFileName));		local uploadsNaPasta = _uploadsByFolder[upload.collationFolderName]; 				if uploadsNaPasta == nil then			uploadsNaPasta = {};			_uploadsByFolder[upload.collationFolderName] = uploadsNaPasta;		end;				uploadsNaPasta[upload.id] = upload.id;				function upload:atualizarProgressoEmNodo(node)			node.uploadSent = upload.uploadSent;			node.uploadMax = upload.uploadMax;							node.errorMsg = upload.errorMsg;					end;				function upload:setupNodeObject(node)			node.name = extractFileName(fullDestFileName);			upload:atualizarProgressoEmNodo(node);			node.uploading = true;							end;				function upload:addNavigatorNode(node)			upload:setupNodeObject(node);			upload.nodes[node] = true;		end;				function upload:addNewNavigatorNodeInto(parentNode)			local oldNode = parentNode[upload.nodeName];						if oldNode ~= nil then				upload:removeNavigatorNode(oldNode);			end;						parentNode[upload.nodeName] = {};			local node = parentNode[upload.nodeName];					upload:addNavigatorNode(node);						return node;		end;				function upload:removeNavigatorNode(node)			upload.nodes[node] = nil;		end;				function upload:progress(currentBytes, maxBytes)			upload.uploadSent = currentBytes;			upload.uploadMax = maxBytes;								for k, v in pairs(upload.nodes) do				if k ~= nil then									upload:atualizarProgressoEmNodo(k);				end;			end;		end;						function upload:setErrorState(errorMsg)			upload.errorMsg = errorMsg;							for k, v in pairs(upload.nodes) do				if k ~= nil then									upload:atualizarProgressoEmNodo(k);				end;			end;				end;				function upload:finalizar()			_uploads[upload.id] = nil;			_uploadsByFullName[upload.collationDestFileName] = nil;						local finUploadsNaPasta = _uploadsByFolder[upload.collationFolderName];						if finUploadsNaPasta ~= nil then				finUploadsNaPasta[upload.id] = nil;								if next(finUploadsNaPasta) == nil then					-- tabela vazia					_uploadsByFolder[upload.collationFolderName] = nil;				end;			end;						end;				return upload;	else		return upload;	end;end;return fdUploads;