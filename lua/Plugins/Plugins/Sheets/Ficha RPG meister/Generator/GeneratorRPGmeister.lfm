<?xml version="1.0" encoding="UTF-8"?>
<form name="frmGeneratorRPGmeister" formType="tablesDock" dataType="Ambesek.Generator.RPGmeister" title="Generator RPGmeister" align="client" theme="dark">
	<script>
		<![CDATA[
		--local races = NDB.load("races.xml");
		--local classes = NDB.load("classes.xml");

		-- DEBUG FUNCTIONS

		local function dump(o)
		   if type(o) == 'table' then
			  local s = '{ '
			  for k,v in pairs(o) do
				 if type(k) ~= 'number' then k = '"'..k..'"' end
				 s = s .. '['..k..'] = ' .. dump(v) .. ','
			  end
			  return s .. '} '
		   else
			  return tostring(o)
		   end
		end

		local function write(str)
			local mesa = Firecast.getMesaDe(sheet);
			if str==nil then
				mesa.activeChat:escrever("NIL");
			else
				mesa.activeChat:escrever(str);
			end
		end;

		-- AUTO UPDATE FUNCTIONS

		local function isNewVersion(installed, downloaded)
			local installedVersion = {};
			local installedIndex = 0;
			for i in string.gmatch(installed, "[^%.]+") do
				installedIndex = installedIndex +1;
				installedVersion[installedIndex] = i;
			end

			local downloadedVersion = {};
			local downloadedIndex = 0;
			for i in string.gmatch(downloaded, "[^%.]+") do
				downloadedIndex = downloadedIndex +1;
				downloadedVersion[downloadedIndex] = i;
			end

			for i=1, math.min(installedIndex, downloadedIndex), 1 do 
				if (tonumber(installedVersion[i]) or 0) > (tonumber(downloadedVersion[i]) or 0) then
					return false;
				elseif (tonumber(installedVersion[i]) or 0) < (tonumber(downloadedVersion[i]) or 0) then
					return true;
				end;
			end;

			if downloadedIndex > installedIndex then
				return true;
			else
				return false;
			end;
		end;

		-- JSON DECODE FUNCTIONS

		local escape_char_map = {
			[ "\\" ] = "\\\\",
			[ "\"" ] = "\\\"",
			[ "\b" ] = "\\b",
			[ "\f" ] = "\\f",
			[ "\n" ] = "\\n",
			[ "\r" ] = "\\r",
			[ "\t" ] = "\\t",
		}

		local escape_char_map_inv = { [ "\\/" ] = "/" }
		for k, v in pairs(escape_char_map) do
			escape_char_map_inv[v] = k
		end

		local parse

		local function create_set(...)
			local res = {}
			for i = 1, select("#", ...) do
			res[ select(i, ...) ] = true
			end
			return res
		end

		local space_chars	= create_set(" ", "\t", "\r", "\n")
		local delim_chars	= create_set(" ", "\t", "\r", "\n", "]", "}", ",")
		local escape_chars  = create_set("\\", "/", '"', "b", "f", "n", "r", "t", "u")
		local literals	= create_set("true", "false", "null")

		local literal_map = {
		  [ "true"  ] = true,
		  [ "false" ] = false,
		  [ "null"  ] = nil,
		}

		local function next_char(str, idx, set, negate)
		  for i = idx, #str do
			if set[str:sub(i, i)] ~= negate then
			  return i
			end
		  end
		  return #str + 1
		end

		local function decode_error(str, idx, msg)
		  local line_count = 1
		  local col_count = 1
		  for i = 1, idx - 1 do
			col_count = col_count + 1
			if str:sub(i, i) == "\n" then
			  line_count = line_count + 1
			  col_count = 1
			end
		  end
		  error( string.format("%s at line %d col %d", msg, line_count, col_count) )
		end

		local function codepoint_to_utf8(n)
		  -- http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=iws-appendixa
		  local f = math.floor
		  if n <= 0x7f then
			return string.char(n)
		  elseif n <= 0x7ff then
			return string.char(f(n / 64) + 192, n % 64 + 128)
		  elseif n <= 0xffff then
			return string.char(f(n / 4096) + 224, f(n % 4096 / 64) + 128, n % 64 + 128)
		  elseif n <= 0x10ffff then
			return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
							   f(n % 4096 / 64) + 128, n % 64 + 128)
		  end
		  error( string.format("invalid unicode codepoint '%x'", n) )
		end

		local function parse_unicode_escape(s)
		  local n1 = tonumber( s:sub(3, 6),  16 )
		  local n2 = tonumber( s:sub(9, 12), 16 )
		  -- Surrogate pair?
		  if n2 then
			return codepoint_to_utf8((n1 - 0xd800) * 0x400 + (n2 - 0xdc00) + 0x10000)
		  else
			return codepoint_to_utf8(n1)
		  end
		end

		local function parse_string(str, i)
		  local has_unicode_escape = false
		  local has_surrogate_escape = false
		  local has_escape = false
		  local last
		  for j = i + 1, #str do
			local x = str:byte(j)

			if x < 32 then
			  decode_error(str, j, "control character in string")
			end

			if last == 92 then -- "\\" (escape char)
			  if x == 117 then -- "u" (unicode escape sequence)
				local hex = str:sub(j + 1, j + 5)
				if not hex:find("%x%x%x%x") then
				  decode_error(str, j, "invalid unicode escape in string")
				end
				if hex:find("^[dD][89aAbB]") then
				  has_surrogate_escape = true
				else
				  has_unicode_escape = true
				end
			  else
				local c = string.char(x)
				if not escape_chars[c] then
				  decode_error(str, j, "invalid escape char '" .. c .. "' in string")
				end
				has_escape = true
			  end
			  last = nil

			elseif x == 34 then -- '"' (end of string)
			  local s = str:sub(i + 1, j - 1)
			  if has_surrogate_escape then
				s = s:gsub("\\u[dD][89aAbB]..\\u....", parse_unicode_escape)
			  end
			  if has_unicode_escape then
				s = s:gsub("\\u....", parse_unicode_escape)
			  end
			  if has_escape then
				s = s:gsub("\\.", escape_char_map_inv)
			  end
			  return s, j + 1

			else
			  last = x
			end
		  end
		  decode_error(str, i, "expected closing quote for string")
		end

		local function parse_number(str, i)
		  local x = next_char(str, i, delim_chars)
		  local s = str:sub(i, x - 1)
		  local n = tonumber(s)
		  if not n then
			decode_error(str, i, "invalid number '" .. s .. "'")
		  end
		  return n, x
		end

		local function parse_literal(str, i)
		  local x = next_char(str, i, delim_chars)
		  local word = str:sub(i, x - 1)
		  if not literals[word] then
			decode_error(str, i, "invalid literal '" .. word .. "'")
		  end
		  return literal_map[word], x
		end

		local function parse_array(str, i)
		  local res = {}
		  local n = 1
		  i = i + 1
		  while 1 do
			local x
			i = next_char(str, i, space_chars, true)
			-- Empty / end of array?
			if str:sub(i, i) == "]" then
			  i = i + 1
			  break
			end
			-- Read token
			x, i = parse(str, i)
			res[n] = x
			n = n + 1
			-- Next token
			i = next_char(str, i, space_chars, true)
			local chr = str:sub(i, i)
			i = i + 1
			if chr == "]" then break end
			if chr ~= "," then decode_error(str, i, "expected ']' or ','") end
		  end
		  return res, i
		end

		local function parse_object(str, i)
		  local res = {}
		  i = i + 1
		  while 1 do
			local key, val
			i = next_char(str, i, space_chars, true)
			-- Empty / end of object?
			if str:sub(i, i) == "}" then
			  i = i + 1
			  break
			end
			-- Read key
			if str:sub(i, i) ~= '"' then
			  decode_error(str, i, "expected string for key")
			end
			key, i = parse(str, i)
			-- Read ':' delimiter
			i = next_char(str, i, space_chars, true)
			if str:sub(i, i) ~= ":" then
			  decode_error(str, i, "expected ':' after key")
			end
			i = next_char(str, i + 1, space_chars, true)
			-- Read value
			val, i = parse(str, i)
			-- Set
			res[key] = val
			-- Next token
			i = next_char(str, i, space_chars, true)
			local chr = str:sub(i, i)
			i = i + 1
			if chr == "}" then break end
			if chr ~= "," then decode_error(str, i, "expected '}' or ','") end
		  end
		  return res, i
		end

		local char_func_map = {
		  [ '"' ] = parse_string,
		  [ "0" ] = parse_number,
		  [ "1" ] = parse_number,
		  [ "2" ] = parse_number,
		  [ "3" ] = parse_number,
		  [ "4" ] = parse_number,
		  [ "5" ] = parse_number,
		  [ "6" ] = parse_number,
		  [ "7" ] = parse_number,
		  [ "8" ] = parse_number,
		  [ "9" ] = parse_number,
		  [ "-" ] = parse_number,
		  [ "t" ] = parse_literal,
		  [ "f" ] = parse_literal,
		  [ "n" ] = parse_literal,
		  [ "[" ] = parse_array,
		  [ "{" ] = parse_object,
		}

		parse = function(str, idx)
		  local chr = str:sub(idx, idx)
		  local f = char_func_map[chr]
		  if f then
			return f(str, idx)
		  end
		  decode_error(str, idx, "unexpected character '" .. chr .. "'")
		end

		function decode(str)
		  if type(str) ~= "string" then
			error("expected argument of type string, got " .. type(str))
		  end
		  local res, idx = parse(str, next_char(str, 1, space_chars, true))
		  idx = next_char(str, idx, space_chars, true)
		  if idx <= #str then
			decode_error(str, idx, "trailing garbage")
		  end
		  return res
		end

		local function InitSkills()
			local nodes = NDB.getChildNodes(generatorSheet.npc.campoDasPericias)
			if #nodes>0 then return end

			generatorSheet.npc.campoDasPericias = NDB.load("rpgmeisterskills.xml");
		end
		]]> 
	</script>
	<dataScopeBox name="scope" align="client">
		<layout align="top" height="25">
				<label align="left" width="150" field="raca" horzTextAlign="center"/>
				<label align="left" width="150" field="classe1" horzTextAlign="center"/>
				<button align="left" width="150" text="Subir de Nível">
					<event name="onClick">
						LevelUpdate()
					</event>
				</button>
				<label align="left" width="75" text="Nível" horzTextAlign="center"/>
				<label align="left" width="75" field="nep"/>
				<label align="left" width="100" field="xpAtual"/>
		</layout>
		<tabControl align="client">
			<tab title="Raça &amp; Classe">
				<import file="RaceClasse.xml"/>
			</tab>
			<tab title="Perícias">
				<import file="Skills.xml"/>
			</tab>
			<tab title="Magias">
				<import file="Spells.xml"/>
			</tab>
			<tab title="Creditos">
				<import file="Credits.xml"/>
			</tab>
		</tabControl>
		<button align="bottom" height="25" text="Reiniciar">
				<event name="onClick">
					generatorSheet.npc = {}
					InitSkills()
				</event>
		</button>
	</dataScopeBox>
	<event name="onNodeReady">
		-- Carrega o local sheet para ser usado. 
		generatorSheet = NDB.load("generator.xml");

		if generatorSheet.npc == nil then generatorSheet.npc = {} end;
		self.scope:setNodeObject(generatorSheet.npc);

		local json = VHD.openFile("Generator/data.json");
		local file = {};
		json:read(file, json.remainingBytes);
		local str = Utils.binaryDecode(file, "utf8");

		--local races = NDB.load("races.xml");
		--races.db = decode(str);

		generatorSheet.db = {};
		generatorSheet.db = decode(str);
	</event>
	<event name="onNodeReady">
		Internet.download("https://github.com/rrpgfirecast/firecast/blob/master/Plugins/Sheets/Ficha%20RPG%20meister/output/Ficha%20RPG%20meister.rpk?raw=true",
			function(stream, contentType)
				local info = Firecast.Plugins.getRPKDetails(stream);
				generatorSheet.versionDownloaded = "VERSÃO DISPONÍVEL: " .. info.version;

				local installed = Firecast.Plugins.getInstalledPlugins();
				local myself;
				for i=1, #installed, 1 do
					if installed[i].moduleId == info.moduleId then
						myself = installed[i];
						generatorSheet.versionInstalled = "VERSÃO INSTALADA: " .. installed[i].version;
					end;
				end;

				rawset(generatorSheet, "stream", stream);

				if generatorSheet.noUpdate==true then return end;
				if myself~= nil and isNewVersion(myself.version, info.version) then
					Dialogs.choose("Há uma nova versão desse plugin. Deseja instalar?",{"Sim", "Não", "Não perguntar novamente."},
						function(selected, selectedIndex, selectedText)
							if selected and selectedIndex == 1 then
								local install = Firecast.Plugins.installPlugin(rawget(generatorSheet,"stream"), true);
								if install==false then
									GUI.openInBrowser('https://github.com/rrpgfirecast/firecast/blob/master/Plugins/TablesDock/AutoUpdater/output/AutoUpdater.rpk?raw=true');
								end;
							elseif selected and selectedIndex == 3 then
								generatorSheet.noUpdate = true;
							end;
						end);
				end;
			end,
			function (errorMsg)
				--showMessage(errorMsg);
			end,
			function (downloaded, total)
				-- esta função será chamada constantemente.
				-- dividir "downloaded" por "total" lhe dará uma porcentagem do download.
			end,
			"checkForModification");
	</event>
</form>