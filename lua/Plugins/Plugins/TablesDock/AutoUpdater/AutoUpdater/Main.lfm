<?xml version="1.0" encoding="UTF-8"?>
<form name="frmMainAutoupdater" formType="tablesDock" dataType="Ambesek.Auto.Updater" title="Plugin Auto Updater" align="client" theme="dark">
    <script>
        <![CDATA[
        local function dump(o)
           if type(o) == 'table' then
              local s = '{ '
              for k,v in pairs(o) do
                 if type(k) ~= 'number' then k = '"'..k..'"' end
                 s = s .. '['..k..'] = ' .. dump(v) .. ','
              end
              return s .. '} '
           else
              return tostring(o)
           end
        end
        
        local function write(str)
            local mesa = Firecast.getMesaDe(self);
            if str then
                mesa.activeChat:escrever(str);
            else
                mesa.activeChat:escrever("String nula");
            end;
        end;

        local function tryTranslate(text)
            local trans = Locale.tryLang(text);
            if trans == nil then trans = text end;
            return trans;
        end

        local function isNewVersion(installed, downloaded)
            local installedVersion = {};
            local installedIndex = 0;
            for i in string.gmatch(installed, "[^%.]+") do
                installedIndex = installedIndex +1;
                installedVersion[installedIndex] = i;
            end

            local downloadedVersion = {};
            local downloadedIndex = 0;
            for i in string.gmatch(downloaded, "[^%.]+") do
                downloadedIndex = downloadedIndex +1;
                downloadedVersion[downloadedIndex] = i;
            end

            for i=1, math.min(installedIndex, downloadedIndex), 1 do 
                if (tonumber(installedVersion[i]) or 0) > (tonumber(downloadedVersion[i]) or 0) then
                    return false;
                elseif (tonumber(installedVersion[i]) or 0) < (tonumber(downloadedVersion[i]) or 0) then
                    return true;
                end;
            end;

            if downloadedIndex > installedIndex then
                return true;
            else
                return false;
            end;
        end;

        local function verifyUpdate(plugin)
            local nodes = NDB.getChildNodes(updaterSheet.installedPluginsList); 
            local myNode;
            for i=1, #nodes, 1 do
                if nodes[i].moduleId == plugin.id then
                    myNode = nodes[i];
                end;
            end

            updaterSheet.loaded = updaterSheet.loaded + 1;
            updaterSheet.loading = tryTranslate("loading") .. updaterSheet.loaded .. "/" .. updaterSheet.toLoad;

            if updaterSheet.toLoad <= updaterSheet.loaded then
                self.loader.visible = false;
                self.downloadedPluginsList:sort();
            end;

            if myNode ~= nil then
                myNode.versionAvailable = plugin.version;
                myNode.url = plugin.url;
            else
                local item = self.downloadedPluginsList:append();
                item.name = plugin.name;
                item.moduleId = plugin.id;
                item.author = plugin.author;
                item.version = plugin.version;
                item.versionAvailable = plugin.version;
                item.url = plugin.url;
                item.enabled = true;
                item.description = plugin.description;
                item.contact = plugin.contact;
            end;
        end;

        local function init()
            -- Carrega o local sheet para ser usado. 
            updaterSheet = NDB.load("config.xml");
            self.scope:setNodeObject(updaterSheet);

            -- Limpa os recordList e carrega a lista de plugins instaladados
            local installed = Firecast.Plugins.getInstalledPlugins();
            local nodesDownloaded = NDB.getChildNodes(updaterSheet.downloadedPluginsList); 
            for i=1, #nodesDownloaded, 1 do
                NDB.deleteNode(nodesDownloaded[i]);
            end;
            local nodesInstalled = NDB.getChildNodes(updaterSheet.installedPluginsList); 
            for i=1, #nodesInstalled, 1 do
                NDB.deleteNode(nodesInstalled[i]);
            end;

            -- Adiciona os plugins instalados a lista
            for i=1, #installed, 1 do
                local item = self.installedPluginsList:append();
                item.name = installed[i].name;
                item.moduleId = installed[i].moduleId;
                item.author = installed[i].author;
                item.version = installed[i].version;
                item.enabled = true;
                item.description = installed[i].description;
                item.contact = installed[i].contact;
            end;
            
            -- Adiciona o nome das colunas as listas.
            local item = self.installedPluginsList:append();
            item.name = tryTranslate("name")
            item.moduleId = tryTranslate("id")
            item.author = tryTranslate("author")
            item.version = tryTranslate("installed")
            item.versionAvailable = tryTranslate("available")
            item.enabled = false;

            local item = self.downloadedPluginsList:append();
            item.name = tryTranslate("name")
            item.moduleId = tryTranslate("id")
            item.author = tryTranslate("author")
            item.version = tryTranslate("installed")
            item.enabled = false;

            self.installedPluginsList:sort();

            -- Inicia o download da lista de plugins do git

            self.loader.visible = true;
            updaterSheet.loading = tryTranslate("loading") .. "?/?";
            Internet.download("https://raw.githubusercontent.com/rrpgfirecast/firecast/master/Plugins/plugins.xml",
                function(stream, contentType)
                    if VHD.fileExists("plugins.xml") then
                        VHD.deleteFile("plugins.xml");
                    end;
                    local file = VHD.openFile("plugins.xml", "w");
                    file:copyFrom(stream, stream.size);
                    setTimeout(
                        function ()
                            file:close();
                            local import = NDB.load("plugins.xml");

                            local list = NDB.getChildNodes(import);

                            updaterSheet.loaded = 0;
                            updaterSheet.toLoad = #list;
                            updaterSheet.loading = tryTranslate("loading") .. "0/" .. updaterSheet.toLoad;

                            for i=1, #list, 1 do
                                -- Verifica se tem updates em cada plugin
                                verifyUpdate(list[i]);
                            end;

                            self.downloadedPluginsList:sort();

                        end, 
                        1000
                    );
                end,       
                function (errorMsg)
                    -- esta função será chamada quando ocorrer algum erro no download.
                    -- errorMsg possui a msg de erro
                    showMessage(tryTranslate("error.load").."\n" .. errorMsg);
                end,       
                function (downloaded, total)
                    -- esta função será chamada constantemente.
                    -- dividir "downloaded" por "total" lhe dará uma porcentagem do download.
                end,
                "alwaysDownload");
        end;
        ]]> 
    </script>
    <dataScopeBox name="scope" align="client">
        <tabControl align="client">
            <tab title="@@hud.installed">
                <import file="Installed.lfm"/>
            </tab>
            <tab title="@@hud.avaialable">
                <import file="Available.lfm"/>
            </tab>
    		<tab title="@@hud.credits">
                <import file="Credits.lfm"/>
            </tab>
        </tabControl>
        <layout left="250" top="0" height="25" width="150" name="loader" visible="false">
             <image left="0" top="0" width="25" height="25" src="images/hourglass.png"/>
             <label left="25" top="0" width="140" height="25" field="loading"/>
        </layout>
    </dataScopeBox>
    <event name="onNodeChanged">
        init();
    </event>
    <event name="onNodeReady">
        Internet.download("https://github.com/rrpgfirecast/firecast/blob/master/Plugins/TablesDock/AutoUpdater/output/AutoUpdater.rpk?raw=true",
            function(stream, contentType)
                local info = Firecast.Plugins.getRPKDetails(stream);
                updaterSheet.versionDownloaded = tryTranslate("available")..": " .. info.version;

                local installed = Firecast.Plugins.getInstalledPlugins();
                local myself;
                for i=1, #installed, 1 do
                    if installed[i].moduleId == info.moduleId then
                        myself = installed[i];
                        updaterSheet.versionInstalled = tryTranslate("installed")..": " .. installed[i].version;
                    end;
                end;

                rawset(updaterSheet, "stream", stream);

                if updaterSheet.noUpdate==true then return end;
                if myself~= nil and isNewVersion(myself.version, info.version) then
                    Dialogs.choose(tryTranslate("newVersion"),{tryTranslate("yes"), tryTranslate("no"), tryTranslate("dontAsk")},
                        function(selected, selectedIndex, selectedText)
                            if selected and selectedIndex == 1 then
                                local install = Firecast.Plugins.installPlugin(rawget(updaterSheet,"stream"), true);
                                if install==false then
                                    GUI.openInBrowser('https://github.com/rrpgfirecast/firecast/blob/master/Plugins/TablesDock/AutoUpdater/output/AutoUpdater.rpk?raw=true');
                                end;
                            elseif selected and selectedIndex == 3 then
                                updaterSheet.noUpdate = true;
                            end;
                        end);
                end;
            end,       
            function (errorMsg)
                --showMessage(errorMsg);
            end,       
            function (downloaded, total)
                -- esta função será chamada constantemente.
                -- dividir "downloaded" por "total" lhe dará uma porcentagem do download.
            end,
            "checkForModification");
    </event>
</form>